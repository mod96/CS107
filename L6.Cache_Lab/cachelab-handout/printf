#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "cachelab.h"

#define uc unsigned char

typedef struct{
		char val;
		int tag;
} cblock;


int char2hex(char ch) {
		if ('0' <= ch && ch <= '9') {
				return ch - '0';
		}
		return 10 + (ch - 'a');
}

size_t binary2sizet(char* str, size_t st, size_t ed) {
		size_t res = 0;
		size_t j = 0;
		for (size_t i = ed - 1; i >= st; i--){
				res += (size_t)(str[i] - '0') * (1 << j++);
		}
		return res;
}

void parse_line(const char* str, size_t line_len, size_t s_size, size_t b_size,
								size_t* size,
								size_t* tag,
								size_t* set,
								size_t* b_offset){
		printf("asd");
		char address[9];
		size_t i = 3,
					 j = 0, 
					 k = 0;
		int temp;
		char buffer[101];
		for (i = 3; i < line_len && j < 8; i++){
				if (str[i] == ',') {
						i++;
						for (; i<line_len && k < 100; i++){
								buffer[k++] = str[i];
						}
						buffer[k] = 0;
						*size = atoi(buffer);
				} else {
						address[j++] = str[i];
				}
		}
		address[j] = 0;

		char address_buf[65];
		address_buf[65] = 0;
		for (i = 0; i < 64 - 4 * j; i++) {
				address_buf[i] = '0';
		}
		for (k = 0; k < j - 1; j++) {
				temp = char2hex(address[k]);
				address_buf[i] = (temp >> 3) & 1 ? '1' : '0';
				address_buf[i+1] = (temp >> 2) & 1 ? '1' : '0';
				address_buf[i+2] = (temp >> 1) & 1 ? '1' : '0';
				address_buf[i+3] = temp & 1 ? '1' : '0';
				i += 4;
		}

		*tag = binary2sizet(address_buf, 0, 64 - s_size - b_size);
		*set = binary2sizet(address_buf, 64 - s_size - b_size, 64 - b_size);
		*b_offset = binary2sizet(address_buf, 64 - b_size, 64);
}

int main(int argc, char* argv[])
{
		FILE* fp;
		char* line = NULL;
		
		size_t line_len = 0, size;
		ssize_t read;

		size_t i = 1;
		uc s = 0, E = 0, b = 0;

		int hits = 0,
				misses = 0,
				evictions = 0;
		
		while (i < argc) {
				if((int)argv[i][0] == '-'){
						if (argv[i][1] == 's') {
								s = atoi(argv[i+1]);
						} else if (argv[i][1] == 'E') {
								E = atoi(argv[i+1]);
						} else if (argv[i][1] == 'b') {
								b = atoi(argv[i+1]);
						} else if (argv[i][1] == 't') {
								fp = fopen(argv[i+1], "r");
								if (fp == NULL)
										exit(EXIT_FAILURE);
						} else {
								printf("Invalid argument passed.");
						}
				}
				i += 1;
		}

		size_t s_size = 1 << s,
			     e_size = E,
			     b_size = 1 << b;
		cblock** cache = (cblock**)malloc(s_size * sizeof(cblock*));
		for (i = 0; i < s_size; i++){
				cache[i] = (cblock*)malloc(e_size * sizeof(cblock));
		}
		printf("asdaasdasdassd\n");
		
		size_t tag, set, b_offset;
		while ((read = getline(&line, &line_len, fp)) != -1) {
				if (line[0] == 'I') continue;
        parse_line(line, line_len, s_size, b_size, &size, &tag, &set, &b_offset);
				switch( line[1] ) {
						case 'L':
						case 'S':
								break;
						case 'M':
								break;
				}
				printf("%zu %zu %zu %zu\n", tag, set, b_offset, size);
				printf("Retrieved line of length %zu: %s\n", read, line);
		}	

    printSummary(hits, misses, evictions);

		for (i=0; i<s; i++){
				free(cache[i]);
		}

		fclose(fp);
		if (line){
				free(line);
		}
		exit(EXIT_SUCCESS);
		
    return 0;
}
